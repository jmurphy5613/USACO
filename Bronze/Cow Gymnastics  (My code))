#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <set>
#include <string>
#include <unordered_set>
#include <queue>
#include <iostream>
#include <stack>
using namespace std;

int main(void)
{
	ifstream fin("gymnastics.in");
	ofstream fout("gymnastics.out");
	int K, N;
	fin >> K >> N;
	vector<pair<int, int>> combos;
	vector<int> nums(N + 1);
	for (int i = 1; i <= N; i++)
	{
		nums[i] = i;
	}
	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			if (i != j) combos.push_back({ i, j });
		}
	}
	for (int i = 0; i < K; i++)
	{
		vector<int> permutation(N + 1);
		for (int j = 1; j <= N; j++)
		{
			fin >> permutation[j];
		}
		vector<pair<int, int>> remove;
		for (auto element : combos)
		{
			auto first = find(permutation.begin(), permutation.end(), element.first);
			int indexFirst = distance(permutation.begin(), first);
			auto second = find(permutation.begin(), permutation.end(), element.second);
			int indexSecond = distance(permutation.begin(), second);
			if (indexFirst < indexSecond) { remove.push_back({ element.first, element.second }); }
		}
		for (auto element : remove)
		{
			auto it = find(combos.begin(), combos.end(), element);
			combos.erase(it);
		}
	}
	fout << combos.size();
}	
/* THOUGHT PROCESS:
Get a vector that is numbered 1...N then generate every possible pair of numbers from that vector. You should now have N*3 pairs. Then after every line of input, iterate through all the pairs and check if the index of
the first number is at a higher index than the index of the second number. If it doesn't satasfy those constriants than it should be deleted.
*/
