#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <cassert>
#include <algorithm>
using namespace std;

int main(void)
{
    ifstream fin("lifeguards.in");
    ofstream fout("lifeguards.out");
    int n;
    fin >> n;
    vector<vector<int>> A(n, vector<int>(2, 0));
    for (int i = 0; i < n; i++)
    {
        fin >> A[i][0] >> A[i][1];
    }
    vector<pair<int, int>> times; 
    int maximumTime = 0;
    for (int i = 0; i < n; i++)
    {
        int first = A[i][0];
        int second = A[i][1];
        A.erase(A.begin() + i);
        for (int j = 0; j < n - 1; j++)
        {
            times.push_back({ A[j][0], A[j][1] });             
        }
        sort(times.begin(), times.end());
        int lastEndtime = 0;
        int time = 0;
        for (auto element : times) 
        {
            if (element.first > lastEndtime)
            {
                time += element.second - element.first;
                lastEndtime = element.second;
            }
            else if (element.first < lastEndtime && element.second > lastEndtime) 
            {
                time += element.second - lastEndtime;
                lastEndtime = element.second;
            }
        }
        if (time > maximumTime) maximumTime = time;
        times.clear();
        vector<int> v = { first, second };
        A.insert(A.begin() + i, v);
    }
    fout << maximumTime;
}
