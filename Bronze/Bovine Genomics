#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <set>
#include <string>
#include <queue>
#include <iostream>
#include <stack>
using namespace std;

int main(void)
{
	ifstream fin("cownomics.in");
	ofstream fout("cownomics.out");
	int N, M;
	fin >> N >> M;
	vector<string> spotted(N);
	vector<string> notspotted(N);
	for (int i = 0; i < N; i++)
	{
		fin >> spotted[i];
	}
	for (int i = 0; i < N; i++)
	{
		fin >> notspotted[i];
	}
	int count = 0;
	for (int i = 0; i < M; i++)
	{
		vector<char> Scurrent;
		for (int j = 0; j < N; j++) Scurrent.push_back(spotted[j][i]);
		vector<char> NScurrent;
		for (int j = 0; j < N; j++) NScurrent.push_back(notspotted[j][i]);
		bool s = true;
		for (int j = 0; j < N; j++)
		{
			char c = Scurrent[j];
			if (find(NScurrent.begin(), NScurrent.end(), c) == NScurrent.end()) continue;
			else s = false;
		}
		if (s == true) count++;
	}
	fout << count;
}	
/* THOUGHT PROCESS:
get the input, then for each row you check if that row explains spottieness
*/
