#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <set>
#include <string>
#include <unordered_set>
#include <queue>
using namespace std;

int main(void)
{
	ifstream fin("moocast.in");
	ofstream fout("moocast.out");
	int N;
	fin >> N;
	pair<int, int> cords[200];
	int p[200];
	for (int i = 0; i < N; i++)
	{
		fin >> cords[i].first >> cords[i].second >> p[i];
	}
	vector<int> Adj[200];
	for (int i = 0; i < N; i++)
	{
		for (int j = i + 1; j < N; j++)
		{
			int distance = pow(cords[j].first - cords[i].first, 2) + pow(cords[j].second - cords[i].second, 2);
			if (distance < pow(p[i], 2)) Adj[i].push_back(j);
			if (distance < pow(p[j], 2)) Adj[j].push_back(i);
		}
	}
	int highest = 0;
	for (int i = 0; i < N; i++)
	{
		int count = 0;
		set<int> visitedIndex;
		queue<int> q;
		q.push(i);
		while (!q.empty())
		{
			int current = q.front();
			q.pop();
			if (find(visitedIndex.begin(), visitedIndex.end(), current) == visitedIndex.end())
			{
				visitedIndex.insert(current);
				count++;
			}
			for (int num : Adj[current])
			{
				if (find(visitedIndex.begin(), visitedIndex.end(), num) == visitedIndex.end())
				{
					q.push(num);
				}
			}

		}
		if (count > highest) highest = count;
	}
	fout << highest;
}
/* THOUGHT PROCESS:
Get all the inputs. Go through every pair of cows to see if they are connected. If they are connected then you creaste a directed edge and add it to the adjacency list by pushing it back in the
current index you are searching.
*/
