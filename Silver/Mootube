#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <cassert>
#include <algorithm>
#include <set>
#include <string>
#include <unordered_set>
#include <queue>
using namespace std;
struct Edge
{
	int to, weight;
	Edge(int dest, int w) :
	to(dest), weight(w)
	{
	}
};
int main(void)
{
	ifstream fin("mootube.in");
	ofstream fout("mootube.out");
	int N, Q, start, end, relevence;
	fin >> N >> Q;
	vector<Edge> A[50000];
	for (int i = 1; i < N; i++)
	{
		fin >> start >> end >> relevence;
		A[start].push_back({ Edge(end, relevence) });
		A[end].push_back({ Edge(start, relevence) });
	}
	vector<int> solutions;
	for (int i = 0; i < Q; i++)
	{
		int count = 0;
		int k, start;
		fin >> k >> start;
		set<int> visted;
		queue<int> q;
		q.push(start);
		while (!q.empty())
		{
			int current = q.front();
			q.pop();
			if (visted.find(current) == visted.end())
			{
				visted.insert(current);
			}
			for (Edge temp : A[current])
			{
				if (temp.weight >= k && visted.find(temp.to) == visted.end())
				{
					q.push(temp.to);
					count++;
				}
			}
		}
		solutions.push_back(count);
	}
	for (int i = 0; i < Q; i++)
	{
		fout << solutions[i] << endl;
	}
}
/* THOUGHT PROCESS:
Use bfs to search neighbors for edges that are under k. If we find an edge that is less than K than we increase the count and add the "to" to the q
*/
